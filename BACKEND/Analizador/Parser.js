/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,25],$V2=[1,18],$V3=[1,17],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[2,5,20,22,60,61,63,66,71,76,84,99,102,103,107,108],$Ve=[2,5,20,22,49,59,60,61,63,66,71,76,84,99,102,103,107,108],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,52],$Vn=[1,62],$Vo=[1,72],$Vp=[1,73],$Vq=[1,86],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[1,81],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[8,20,22,27,28,29,30,31,32,33,34,35,36,37,38,39,41,54,62,63,65,86,95,105,111],$VE=[1,100],$VF=[54,86],$VG=[41,54,86],$VH=[2,112],$VI=[1,102],$VJ=[2,20,22,49,59,60,61,66,71,76,84,99,102,103,107,108],$VK=[1,117],$VL=[1,147],$VM=[2,89],$VN=[1,149],$VO=[1,152],$VP=[1,153],$VQ=[1,154],$VR=[1,155],$VS=[8,54],$VT=[63,111],$VU=[8,20,22,28,29,30,31,32,41,54,62,63,65,86,95,105,111],$VV=[8,20,22,28,29,30,31,32,33,34,41,54,62,63,65,86,95,105,111],$VW=[8,20,22,27,28,29,30,31,32,33,34,35,41,54,62,63,65,86,95,105,111],$VX=[8,20,22,27,28,29,30,31,32,33,34,35,36,37,38,41,54,62,63,65,86,95,105,111],$VY=[1,167],$VZ=[8,54,95],$V_=[1,178],$V$=[2,46],$V01=[8,41,53,54],$V11=[41,54],$V21=[1,200],$V31=[8,28,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"ifG":7,"PCOMA":8,"print":9,"createTable":10,"insertG":11,"alterTable":12,"select2":13,"updateG":14,"deletG":15,"beginEnd":16,"for":17,"while":18,"case":19,"R_BEGIN":20,"instruccionesBegin":21,"R_END":22,"instruccionBegin":23,"asignaciones1":24,"actualizarV":25,"expresion":26,"MENOS":27,"AND":28,"EQUALS":29,"OR":30,"MAYORK":31,"MENORK":32,"MENORIK":33,"MAYORIK":34,"MAS":35,"POR":36,"DIVI":37,"MODULO":38,"POTENCIA":39,"PARA":40,"PARC":41,"DOUBLE":42,"DATE":43,"INTEGER":44,"VARCHAR":45,"VARIABLE":46,"casteo":47,"asignacionDefault":48,"R_DECLARE":49,"list_asignaciones":50,"asignacion1":51,"tipoDato":52,"R_DEFAULT":53,"COMA":54,"R_INT":55,"R_DOUBLE":56,"R_VARCHAR":57,"R_DATE":58,"R_SET":59,"R_PRINT":60,"R_IF":61,"R_THEN":62,"R_ELSE":63,"R_CAST":64,"R_AS":65,"R_CREATE":66,"R_TABLE":67,"ID":68,"listaColumnas":69,"columnasCreate":70,"R_INSERT":71,"R_INTO":72,"listColumnas":73,"R_VALUES":74,"valuesInsert":75,"R_ALTER":76,"instAlter":77,"R_ADD":78,"R_DROP":79,"R_COLUMN":80,"R_RENAME":81,"R_TO":82,"select":83,"R_SELECT":84,"instSelect":85,"R_FROM":86,"where":87,"listado":88,"from":89,"listExp":90,"listColumnsSelec":91,"columnsSelec":92,"as":93,"expSelect":94,"R_WHERE":95,"conditions":96,"NOT":97,"id":98,"R_UPDATE":99,"listUpdate":100,"set":101,"R_DELETE":102,"R_FOR":103,"R_IN":104,"DOT":105,"idVar":106,"R_WHILE":107,"R_CASE":108,"listInstCase":109,"instCase":110,"R_WHEN":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PCOMA",20:"R_BEGIN",22:"R_END",27:"MENOS",28:"AND",29:"EQUALS",30:"OR",31:"MAYORK",32:"MENORK",33:"MENORIK",34:"MAYORIK",35:"MAS",36:"POR",37:"DIVI",38:"MODULO",39:"POTENCIA",40:"PARA",41:"PARC",42:"DOUBLE",43:"DATE",44:"INTEGER",45:"VARCHAR",46:"VARIABLE",49:"R_DECLARE",53:"R_DEFAULT",54:"COMA",55:"R_INT",56:"R_DOUBLE",57:"R_VARCHAR",58:"R_DATE",59:"R_SET",60:"R_PRINT",61:"R_IF",62:"R_THEN",63:"R_ELSE",64:"R_CAST",65:"R_AS",66:"R_CREATE",67:"R_TABLE",68:"ID",71:"R_INSERT",72:"R_INTO",74:"R_VALUES",76:"R_ALTER",78:"R_ADD",79:"R_DROP",80:"R_COLUMN",81:"R_RENAME",82:"R_TO",84:"R_SELECT",86:"R_FROM",95:"R_WHERE",97:"NOT",99:"R_UPDATE",102:"R_DELETE",103:"R_FOR",104:"R_IN",105:"DOT",107:"R_WHILE",108:"R_CASE",111:"R_WHEN"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[16,3],[21,2],[21,1],[23,2],[23,2],[23,1],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[24,1],[24,2],[51,2],[48,5],[50,3],[50,1],[52,1],[52,1],[52,1],[52,1],[25,4],[9,2],[7,6],[7,8],[47,6],[10,6],[69,3],[69,1],[70,2],[11,10],[73,3],[73,1],[75,3],[75,1],[12,4],[77,2],[77,3],[77,3],[77,5],[83,5],[83,2],[85,1],[85,1],[13,3],[88,1],[88,1],[88,1],[91,3],[91,1],[92,2],[90,3],[90,1],[94,2],[89,3],[87,2],[87,0],[96,3],[96,3],[96,2],[96,3],[96,3],[96,3],[96,3],[96,3],[98,1],[14,5],[100,3],[100,1],[101,3],[15,4],[17,10],[106,1],[18,5],[19,7],[109,2],[109,1],[110,4],[93,2],[93,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2:

		console.log('instrucciones Instruccion');		
	    this.$ = $$[$0-1];
			if (Array.isArray($$[$0])) {
				$$[$0-1].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
				this.$.push($$[$0]);
			}		
	 
break;
case 3:

		console.log('Instruccion');
	    this.$ = []; 
			if (Array.isArray($$[$0])) {
				$$[$0].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
	   			this.$.push($$[$0]);
			}		

		 
break;
case 4:
console.log('if instruccion');
break;
case 5:
console.log('print instruccion');
break;
case 6:
console.log('Instruccion createTable');
break;
case 7:
console.log('Instruccion insertG');
break;
case 8:
console.log('Instruccion alterTable');
break;
case 9:
console.log('Instruccione select 2')
break;
case 10: case 11:
console.log('Instruccion select');
break;
case 12:
console.log('Instruccion beginEnd');
break;
case 13:
console.log('Instruccion for');
break;
case 14:
console.log('Instruccion while');
break;
case 15:
console.log('Instruccion case');
break;
case 16:
console.error('Error sintÃ¡ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 17:

			console.log('beginEnd');
			this.$ = new Bloque($$[$0-1],this._$.first_line, this._$.first_column);
		
break;
case 18:

		console.log('instrucciones instruccionBegin');		
	    this.$ = $$[$0-1];
			if (Array.isArray($$[$0])) {
				$$[$0-1].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
				this.$.push($$[$0]);
			}	
	
break;
case 19:
 
		console.log('instruccionBegin');
	    this.$ = []; 
			if (Array.isArray($$[$0])) {
				$$[$0].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
	   			this.$.push($$[$0]);
			}	
	
break;
case 20:
console.log('asigancion');
break;
case 21:
console.log('actualizarV');
break;
case 23:

		 console.log('-' +$$[$0] ); 
		 this.$ = new expresion($$[$0],null,TipoOp.RESTA, true,this._$.first_line, this._$.first_column);
		 
break;
case 24:

		console.log( 'and' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.AND,this._$.first_line, this._$.first_column);
		
break;
case 25:

		console.log( 'IGUAL' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.IGUAL,this._$.first_line, this._$.first_column);
		
break;
case 26:

		console.log( 'OR' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.OR,this._$.first_line, this._$.first_column);
		
break;
case 27:

		console.log( 'MAYORK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MAYORK,this._$.first_line, this._$.first_column);
		
break;
case 28:

		console.log( 'MENORK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MENORK,this._$.first_line, this._$.first_column);
		
break;
case 29:

		console.log( 'MAYORIK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MENORIK,this._$.first_line, this._$.first_column);
		
break;
case 30:

		console.log( 'MAYORIK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MAYORIK,this._$.first_line, this._$.first_column);
		
break;
case 31:

		console.log( 'SUMA ' +$$[$0-2] + ' + ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.SUMA, false,this._$.first_line, this._$.first_column);
		
break;
case 32:

		console.log( 'RESTA ' +$$[$0-2] + ' - ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.RESTA, false,this._$.first_line, this._$.first_column);
		
break;
case 33:

		console.log( 'POR ' +$$[$0-2] + ' * ' +$$[$0] );
	    this.$ = new expresion($$[$0-2],$$[$0],TipoOp.MULTI, false,this._$.first_line, this._$.first_column);
	     
break;
case 34:

		console.log( 'DIVI ' +$$[$0-2] + ' / ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.DIVISION, false,this._$.first_line, this._$.first_column);
		
break;
case 35:

		console.log( 'DIVI ' +$$[$0-2] + ' % ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.MODULO, false,this._$.first_line, this._$.first_column);
		
break;
case 36:

		console.log( 'DIVI ' +$$[$0-2] + ' ^ ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.POTENCIA, false,this._$.first_line, this._$.first_column);
		
break;
case 37:

		console.log( '( ' +$$[$0-1] + ')' ); 
		this.$ = $$[$0-1];
		
break;
case 38:

		console.log('DOUBLE: ' +$$[$0]); 
		this.$ = new Primitivo(TipoDato.DOUBLE,$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 39:

		console.log('DATE: ' +$$[$0]); 
	    this.$ = new Primitivo(TipoDato.DATE,$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 40:

		console.log('Integer: ' +$$[$0]); 
		this.$ = new Primitivo(TipoDato.INT,$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 41:

		
		console.log('======================================='); 
		console.log('VARCHAR: ' ,$$[$0].slice(1,-1)); 
		console.log('======================================='); 
		this.$ = new Primitivo(TipoDato.VARCHAR,$$[$0].slice(1,-1),this._$.first_line, this._$.first_column);
		
		
break;
case 42:

		console.log('LLAMADO DE VARIABLE: ' +$$[$0]); 
		this.$ = new CallVar($$[$0],this._$.first_line, this._$.first_column);
		
break;
case 43:

		this.$ = $$[$0];
		
break;
case 44:

				console.log('Asignacion de variable: ' +$$[$0]);
				this.$ = $$[$0];
			
break;
case 45:
 
				console.log('Asignacioness de variables: ' +$$[$0]);
				this.$ = $$[$0];
			
break;
case 46:
 
				this.$ = new Asig($$[$0-1],null,$$[$0],this._$.first_line, this._$.first_column);
			
break;
case 47:

				console.log(`Asignacion de variable: ${$$[$0-3]} valor: ${$$[$0]}`);
				this.$ = new Asig($$[$0-3],$$[$0],$$[$0-2],this._$.first_line, this._$.first_column);

break;
case 48:

					this.$ = $$[$0-2];
					this.$.push($$[$0]);
					console.log('Lista asignaciones coma asignacion 1');
				
break;
case 49:

					console.log('asignacion 1');
					this.$ = []; 
					this.$.push($$[$0]);
				
break;
case 50:
this.$ = TipoDato.INT; 
break;
case 51:
this.$ = TipoDato.DOUBLE; 
break;
case 52:
this.$ = TipoDato.VARCHAR; 
break;
case 53:
this.$ = TipoDato.DATE; 
break;
case 54:

		console.log(`Actualizacion de variable: ${$$[$0-2]} valor: ${$$[$0]}`);
		this.$ = new Actualizar($$[$0-2],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 55:
 
		
		console.log(`Print:`);
		this.$ = new Mostraar($$[$0],this._$.first_line, this._$.first_column);
	
break;
case 56:

		console.log(`If: ${$$[$0-4]} valor: ${$$[$0-1]}`);
		this.$ = new IfC($$[$0-4],$$[$0-2],this._$.first_line, this._$.first_column);
	
break;
case 57:


		console.log('IFELSE');
		this.$ = new IfElse($$[$0-6],$$[$0-4],$$[$0-2],this._$.first_line, this._$.first_column);
	
break;
case 58:
 
		console.log('Casteo');
		this.$ = new Casteo($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 59:
 
			console.log('CreateTable: ');
			this.$ = new TableeI($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
		
break;
case 60:
 
		console.log('listaColumnas COMA columnasCreateeate');
		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 61:

		console.log('  columnasCreateeate');
		this.$ = [];
		this.$.push($$[$0]);
	
break;
case 62:
 
			console.log('ColumnasCreate');
			console.log(`ID: ${$$[$0-1]}`);
			this.$ = new Columnas($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 63:

		console.log('Insert: ');
		this.$ = new InsertIng($$[$0-7],$$[$0-5],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 64:
 
			console.log('listColumnas');
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 65:
 
			console.log('listColumnas');
			this.$ = [];
			this.$.push($$[$0]);
		
break;
case 66:
 
		console.log('ValuesInsert');
		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 67:
 
		console.log('ValuesInsert');
		this.$ = [];
		this.$.push($$[$0]);
	
break;
case 68:
 
		console.log('AlterTable');
		this.$ = new AlterT($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 69:
 
		console.log('instAlter add colummn');
		this.$ = new AddColumn($$[$0],this._$.first_line, this._$.first_column);

	
break;
case 70:
 
		console.log('instAlter drop column');
		this.$ = new DropColumn($$[$0],this._$.first_line, this._$.first_column);
	
break;
case 71:
 
		console.log('instAlter rename column');
		this.$ = new RenameTable($$[$0],this._$.first_line, this._$.first_column);
	
break;
case 72:
 
		console.log('instAlter rename column');
		this.$ = new RenameColumn($$[$0-2],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 73:

		console.log('select');
		this.$ = new SelectTable($$[$0-1],$$[$0-3],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 75:
 
			console.log('instSelect *');
			this.$ = '*';
		
break;
case 76:
 
			console.log('instSelect listColumnas');
			this.$ = $$[$0];
		
break;
case 78: case 79:
 
			console.log('listado');
			this.$ = $$[$0];
		
break;
case 80:
 
			console.log('instSelect *');
			this.$ = '*';
			//tipoSelectVar =TipoSelect.ALL;
		
break;
case 81:
 
			console.log('listColumnsSelec');
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 82:
 
			console.log('listColumnsSelec');
			this.$ = [];
			this.$.push($$[$0]);
		
break;
case 83:
 
		console.log('columnsSelec');
		this.$ = [];
		this.$.push($$[$0-1]);
		this.$.push($$[$0]);
		//tipoSelectVar =TipoSelect.LISTADOID;
   
break;
case 84:
 
			console.log('listExp');
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 85:
 
			console.log('listExp');
			this.$ = [];
			this.$.push($$[$0]);
		
break;
case 86:
 
			console.log('expSelect');
			this.$ = [];
			this.$.push($$[$0-1]);
			this.$.push($$[$0]);
		
break;
case 87:
 
		this.$ = [];
		this.$.push($$[$0-1]);
		this.$.push($$[$0]);
		console.log('from');
	
break;
case 88:
 
	console.log('where');
	this.$ = $$[$0];
	
break;
case 89:
 
		console.log('where');
		this.$ = null;
	
break;
case 90:

		console.log( 'and' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.AND,this._$.first_line, this._$.first_column);
		
break;
case 91:

		console.log( 'OR' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.OR,this._$.first_line, this._$.first_column);
		
break;
case 92:

		console.log( 'NOT' ); 
		this.$ = new ConditionT(null,$$[$0],true,TipoOp.NOT,this._$.first_line, this._$.first_column);
		
break;
case 93:

		console.log( 'IGUAL' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.IGUAL,this._$.first_line, this._$.first_column);
		
break;
case 94:

		console.log( 'MAYORK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MAYORK,this._$.first_line, this._$.first_column);
		
break;
case 95:

		console.log( 'MENORK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MENORK,this._$.first_line, this._$.first_column);
		
break;
case 96:

		console.log( 'MAYORIK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MENORIK,this._$.first_line, this._$.first_column);
		
break;
case 97:

		console.log( 'MAYORIK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MAYORIK,this._$.first_line, this._$.first_column);
		
break;
case 98:

		console.log('LLAMADO DE ID: ' +$$[$0]); 
		this.$ = new Primitivo(TipoDato.ID,$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 99:

		console.log('updateG');
		this.$ = new UpdateT($$[$0-3],$$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 100:
 
		console.log('listUpdate');
		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 101:
 
		console.log('listUpdate');
		this.$ = [];
		this.$.push($$[$0]);
	
break;
case 102:
 
		console.log('set');
		this.$ = [ ];
		this.$.push($$[$0-2] );
		this.$.push($$[$0] );
	
break;
case 103:
 
		console.log('Delete');
		this.$ = new DeleteT1($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);

	
break;
case 104:
 
		console.log('For');
		this.$ = new ForI($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 105:

		console.log('LLAMADO DE ID: ' +$$[$0]); 
		//ASIG
		this.$ = new VariableClass($$[$0],null,this._$.first_line, this._$.first_column)
	
break;
case 106:
 
		console.log('While');
		this.$ = new WhileT($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 107:
 
		console.log('Case');
		this.$ = new CaseT($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],this._$.first_line, this._$.first_column);
		
	
break;
case 108:
 
		console.log('listInstCase');
		this.$ = $$[$0-1];
		this.$.push($$[$0]);
	
break;
case 109:
 
		console.log('listInstCase');
		this.$ = []; 
		this.$.push($$[$0]);
	
break;
case 110:
 
		console.log('instCase');
		this.$ = [ ]; 
		this.$.push($$[$0-2] );
		this.$.push($$[$0] );
	
break;
case 111:
 
		console.log('as');
		this.$ = $$[$0];
	
break;
case 112:
 
		console.log('as');
		this.$ = null;
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{1:[3]},{2:$V0,5:[1,29],6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},o($Vd,[2,3]),{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},{8:[1,38]},o($Ve,[2,12]),{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:[1,42]},{26:43,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:53,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{67:[1,54]},{72:[1,55]},{67:[1,56]},{26:63,27:$Vf,36:[1,60],40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm,68:$Vn,73:59,88:57,90:58,94:61},{68:[1,64]},{86:[1,65]},{2:$V0,6:70,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:66,23:67,24:68,25:69,48:71,49:$Vo,59:$Vp,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{46:[1,74]},{26:75,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:76,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{1:[2,1]},o($Vd,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,62:[1,77]},{26:91,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:92,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},o($VD,[2,38]),o($VD,[2,39]),o($VD,[2,40]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),{40:[1,93]},{8:[2,55],27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC},{68:[1,94]},{68:[1,95]},{68:[1,96]},{86:[1,98],89:97},{54:[1,99],86:[2,78]},{54:$VE,86:[2,79]},{86:[2,80]},o($VF,[2,85]),o($VG,[2,65]),o($VF,$VH,{93:101,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,65:$VI}),{59:[1,103]},{68:[1,104]},{2:$V0,6:70,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:[1,105],23:106,24:68,25:69,48:71,49:$Vo,59:$Vp,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},o($VJ,[2,19]),{8:[1,107]},{8:[1,108]},o($VJ,[2,22]),{8:[2,44]},{46:[1,110],50:109,51:111},{46:[1,112]},{104:[1,113]},{20:[1,114],27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC},{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,109:115,110:116,111:$VK},{2:$V0,4:118,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{26:119,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:120,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:121,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:122,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:123,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:124,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:125,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:126,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:127,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:128,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:129,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:130,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:131,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},o($VD,[2,23]),{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,41:[1,132]},{26:133,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{40:[1,134]},{40:[1,135]},{77:136,78:[1,137],79:[1,138],81:[1,139]},{8:[2,77]},{68:[1,140]},{26:63,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm,94:141},{68:[1,142]},o($VF,[2,86]),{26:143,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{68:$VL,98:146,100:144,101:145},{8:$VM,87:148,95:$VN},o($Ve,[2,17]),o($VJ,[2,18]),o($VJ,[2,20]),o($VJ,[2,21]),{8:[2,45],54:[1,150]},{52:151,55:$VO,56:$VP,57:$VQ,58:$VR},o($VS,[2,49]),{29:[1,156]},{26:157,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{2:$V0,4:158,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{63:[1,159],110:160,111:$VK},o($VT,[2,109]),{26:161,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{2:$V0,6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:[1,162],60:$V2,61:$V3,63:[1,163],66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},o([8,20,22,28,30,41,54,62,63,65,86,95,105,111],[2,24],{27:$Vq,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VU,[2,25],{27:$Vq,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o([8,20,22,30,41,54,62,63,65,86,95,105,111],[2,26],{27:$Vq,28:$Vr,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VU,[2,27],{27:$Vq,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VU,[2,28],{27:$Vq,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VV,[2,29],{27:$Vq,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VV,[2,30],{27:$Vq,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($VW,[2,31],{36:$Vz,37:$VA,38:$VB,39:$VC}),o($VW,[2,32],{36:$Vz,37:$VA,38:$VB,39:$VC}),o($VX,[2,33],{39:$VC}),o($VX,[2,34],{39:$VC}),o($VX,[2,35],{39:$VC}),o($VD,[2,36]),o($VD,[2,37]),{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,65:[1,164]},{68:$VY,69:165,70:166},{68:$Vn,73:168},{8:[2,68]},{68:$VY,70:169},{80:[1,170]},{80:[1,172],82:[1,171]},{8:$VM,87:173,95:$VN},o($VF,[2,84]),o($VG,[2,64]),o([8,54,86],[2,111],{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),{8:$VM,54:[1,175],87:174,95:$VN},o($VZ,[2,101]),{29:[1,176]},o([29,31,32,33,34],[2,98]),{8:[2,103]},{68:$VL,96:177,97:$V_,98:179},{46:[1,181],51:180},o($VS,$V$,{53:[1,182]}),o($V01,[2,50]),o($V01,[2,51]),o($V01,[2,52]),o($V01,[2,53]),{26:183,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,105:[1,184]},{2:$V0,6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:[1,185],60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{26:186,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},o($VT,[2,108]),{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC,62:[1,187]},{61:[1,188]},{2:$V0,4:189,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{52:190,55:$VO,56:$VP,57:$VQ,58:$VR},{41:[1,191],54:[1,192]},o($V11,[2,61]),{52:193,55:$VO,56:$VP,57:$VQ,58:$VR},{41:[1,194],54:$VE},{8:[2,69]},{68:[1,195]},{68:[1,196]},{68:[1,197]},{8:[2,87]},{8:[2,99]},{68:$VL,98:146,101:198},{26:199,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{8:[2,88],28:$V21,30:[1,201]},{68:$VL,96:202,97:$V_,98:179},{29:[1,203],31:[1,204],32:[1,205],33:[1,206],34:[1,207]},o($VS,[2,48]),{52:208,55:$VO,56:$VP,57:$VQ,58:$VR},{26:209,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{8:[2,54],27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC},{105:[1,210]},{8:[2,106]},{22:[1,211],27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC},{26:212,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{8:[2,56]},{2:$V0,6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:[1,213],60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{41:[1,214]},{8:[2,59]},{68:$VY,70:215},o([8,41,54],[2,62]),{74:[1,216]},{8:[2,70]},{8:[2,71]},{82:[1,217]},o($VZ,[2,100]),o($VZ,[2,102],{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),{68:$VL,96:218,97:$V_,98:179},{68:$VL,96:219,97:$V_,98:179},o($V31,[2,92]),{26:220,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:221,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:222,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:223,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{26:224,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},o($VS,$V$),{8:[2,47],27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC},{26:225,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{8:$VH,65:$VI,93:226},o($VT,[2,110],{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),{61:[1,227]},o($VD,[2,58]),o($V11,[2,60]),{40:[1,228]},{68:[1,229]},o($V31,[2,90]),o([8,30],[2,91],{28:$V21}),o($V31,[2,93],{27:$Vq,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($V31,[2,94],{27:$Vq,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($V31,[2,95],{27:$Vq,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($V31,[2,96],{27:$Vq,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),o($V31,[2,97],{27:$Vq,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),{20:[1,230],27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC},{8:[2,107]},{8:[2,57]},{26:232,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm,75:231},{8:[2,72]},{2:$V0,4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{41:[1,234],54:[1,235]},o($V11,[2,67],{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC}),{2:$V0,6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,22:[1,236],60:$V2,61:$V3,66:$V4,71:$V5,76:$V6,84:$V7,99:$V8,102:$V9,103:$Va,107:$Vb,108:$Vc},{8:[2,63]},{26:237,27:$Vf,40:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:$Vl,47:51,64:$Vm},{8:[2,104]},o($V11,[2,66],{27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,37:$VA,38:$VB,39:$VC})],
defaultActions: {29:[2,1],60:[2,80],71:[2,44],97:[2,77],136:[2,68],148:[2,103],169:[2,69],173:[2,87],174:[2,99],185:[2,106],188:[2,56],191:[2,59],195:[2,70],196:[2,71],226:[2,107],227:[2,57],229:[2,72],234:[2,63],236:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Primitivo = require('../Interprete/expresion/Primitivo.js');
	const expresion = require('../Interprete/expresion/Expresion.js');
	const expresionLo = require('../Interprete/expresion/ExpresionLo.js');
	const TipoDato = require('../Interprete/Enums/TipoDato.js');
	const TipoOp   = require('../Interprete/Enums/TipoOp.js');
	const Asig      = require('../Interprete/Clases/Asig.js');
	const Actualizar = require('../Interprete/Clases/Actualizar.js');
	const IfC = require('../Interprete/Clases/IF.js');
	const IfElse = require('../Interprete/Clases/IFELSE.js');
	//CallVar
	const CallVar = require('../Interprete/Clases/CallVar.js');
	//PRINT 
	const Mostraar = require('../Interprete/Clases/PRINT.js');

	//Casteo: 
	const Casteo = require('../Interprete/Clases/Casteo.js');
	const Columnas = require('../Interprete/Tables/Columnas.js');
	const TableeI = require('../Interprete/Tables/TableeI.js');
	const InsertIng = require('../Interprete/Tables/InsertIn.js');
	const AddColumn = require('../Interprete/Tables/AddColumn.js');
	const DropColumn = require('../Interprete/Tables/DropColumn.js');
	const AlterT = require('../Interprete/Tables/AlterT.js');
	const RenameTable = require('../Interprete/Tables/RenameTable.js');
	const RenameColumn = require('../Interprete/Tables/RenameColumn.js');
	const SelectTable = require('../Interprete/Tables/SelectTable.js');
	const ConditionT = require('../Interprete/Tables/CondicionT.js');
	const UpdateT = require('../Interprete/Tables/UpdateT.js');
	const DeleteT1= require('../Interprete/Tables/DeleteT.js');
	const Bloque = require('../Interprete/Clases/BloqueBegin.js');
	const ForI = require('../Interprete/Clases/ForI.js');
	const VariableClass = require('../Interprete/Entornos/Variable.js');
	const CallId = require('../Interprete/Clases/CallId.js');
	const WhileT = require('../Interprete/Clases/WhileT.js');
	const CaseT = require('../Interprete/Clases/Case.js');
	const TipoSelect = require('../Interprete/Enums/TipoSelec.js');
	var tipoSelectVar = '';

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log('comentario simple'); 
break;
case 1:console.log('multilinea');
break;
case 2:return 55;
break;
case 3:return 56;
break;
case 4:return 57;
break;
case 5:return 58;
break;
case 6:return 67;
break;
case 7:return 71;
break;
case 8:return 72;
break;
case 9:return 74;
break;
case 10:return 66;
break;
case 11:return 76;
break;
case 12:return 79;
break;
case 13:return 80;
break;
case 14:return 81;
break;
case 15:return 78;
break;
case 16:return 82;
break;
case 17:return 102;
break;
case 18:return 84;
break;
case 19:return 86;
break;
case 20:return 95;
break;
case 21:return 64;
break;
case 22:return 65;
break;
case 23:return 'R_DATABASE';
break;
case 24:return 'R_PRIMARY';
break;
case 25:return 'R_KEY';
break;
case 26:return 'R_FOREIGN';
break;
case 27:return 35;
break;
case 28:return 27;
break;
case 29:return 36;
break;
case 30:return 37;
break;
case 31:return 29;
break;
case 32:return 38;
break;
case 33:return 39;
break;
case 34:return 28;
break;
case 35:return 30;
break;
case 36:return 97;
break;
case 37:return 'R_XOR';
break;
case 38:return 34;
break;
case 39:return 33;
break;
case 40:return 32;
break;
case 41:return 31;
break;
case 42:return 'DIFERENTE';
break;
case 43:return 49;
break;
case 44:return 53;
break;
case 45:return 59;
break;
case 46:return 61;
break;
case 47:return 62;
break;
case 48:return 20;
break;
case 49:return 63;
break;
case 50:return 22;
break;
case 51:return 99;
break;
case 52:return 103;
break;
case 53:return 104;
break;
case 54:return 105;
break;
case 55:return 107;
break;
case 56:return 'R_DO';
break;
case 57:return 108;
break;
case 58:return 111;
break;
case 59:return 60;
break;
case 60:return 8;
break;
case 61:return 'LLAVEA';
break;
case 62:return 'LLAVEC';
break;
case 63:return 40;
break;
case 64:return 41;
break;
case 65:return 'CORCHA';
break;
case 66:return 'CORCHC';
break;
case 67:return 54;
break;
case 68: return 45; 
break;
case 69: return 43; 
break;
case 70: return 42; 
break;
case 71: return 44; 
break;
case 72: return 68; 
break;
case 73: return 46; 
break;
case 74:/* Espacios se ignoran */
break;
case 75:return 5;
break;
case 76: console.error('Error lÃ©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:varchar\b)/i,/^(?:date\b)/i,/^(?:table\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:add\b)/i,/^(?:to\b)/i,/^(?:delete\b)/i,/^(?:select\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:database\b)/i,/^(?:primary\b)/i,/^(?:key\b)/i,/^(?:foreign\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:xor\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:begin\b)/i,/^(?:else\b)/i,/^(?:end\b)/i,/^(?:update\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:\.)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:case\b)/i,/^(?:when\b)/i,/^(?:print\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:("([^\\\"]|\\.)*"))/i,/^(?:(([0-9]{4}-[0-9]{2}-[0-9]{2})))/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z][a-zA-Z0-9]*))/i,/^(?:(@[a-zA-Z][a-zA-Z0-9]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}