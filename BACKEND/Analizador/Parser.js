/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,23],$V2=[1,16],$V3=[1,15],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,24],$Vb=[2,5,18,20,59,60,62,65,69,74,81,89,92,93],$Vc=[2,5,18,20,48,58,59,60,62,65,69,74,81,89,92,93],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,47],$Vm=[1,56],$Vn=[1,65],$Vo=[1,66],$Vp=[1,78],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[8,18,25,26,27,28,29,30,31,32,33,34,35,36,37,39,53,61,64,85,96],$VD=[1,90],$VE=[39,53,83],$VF=[2,18,20,48,58,59,60,65,69,74,81,89,92,93],$VG=[1,129],$VH=[2,77],$VI=[1,131],$VJ=[1,134],$VK=[1,135],$VL=[1,136],$VM=[1,137],$VN=[8,53],$VO=[8,18,26,27,28,29,30,39,53,61,64,85,96],$VP=[8,18,26,27,28,29,30,31,32,39,53,61,64,85,96],$VQ=[8,18,25,26,27,28,29,30,31,32,33,39,53,61,64,85,96],$VR=[8,18,25,26,27,28,29,30,31,32,33,34,35,36,39,53,61,64,85,96],$VS=[1,145],$VT=[8,53,85],$VU=[1,156],$VV=[2,45],$VW=[8,39,52,53],$VX=[39,53],$VY=[1,175],$VZ=[8,26,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"ifG":7,"PCOMA":8,"print":9,"createTable":10,"insertG":11,"alterTable":12,"select":13,"updateG":14,"deletG":15,"beginEnd":16,"for":17,"R_BEGIN":18,"instruccionesBegin":19,"R_END":20,"instruccionBegin":21,"asignaciones1":22,"actualizarV":23,"expresion":24,"MENOS":25,"AND":26,"EQUALS":27,"OR":28,"MAYORK":29,"MENORK":30,"MENORIK":31,"MAYORIK":32,"MAS":33,"POR":34,"DIVI":35,"MODULO":36,"POTENCIA":37,"PARA":38,"PARC":39,"DOUBLE":40,"DATE":41,"INTEGER":42,"VARCHAR":43,"VARIABLE":44,"ID":45,"casteo":46,"asignacionDefault":47,"R_DECLARE":48,"list_asignaciones":49,"asignacion1":50,"tipoDato":51,"R_DEFAULT":52,"COMA":53,"R_INT":54,"R_DOUBLE":55,"R_VARCHAR":56,"R_DATE":57,"R_SET":58,"R_PRINT":59,"R_IF":60,"R_THEN":61,"R_ELSE":62,"R_CAST":63,"R_AS":64,"R_CREATE":65,"R_TABLE":66,"listaColumnas":67,"columnasCreate":68,"R_INSERT":69,"R_INTO":70,"listColumnas":71,"R_VALUES":72,"valuesInsert":73,"R_ALTER":74,"instAlter":75,"R_ADD":76,"R_DROP":77,"R_COLUMN":78,"R_RENAME":79,"R_TO":80,"R_SELECT":81,"instSelect":82,"R_FROM":83,"where":84,"R_WHERE":85,"conditions":86,"NOT":87,"id":88,"R_UPDATE":89,"listUpdate":90,"set":91,"R_DELETE":92,"R_FOR":93,"idVar":94,"R_IN":95,"DOT":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PCOMA",18:"R_BEGIN",20:"R_END",25:"MENOS",26:"AND",27:"EQUALS",28:"OR",29:"MAYORK",30:"MENORK",31:"MENORIK",32:"MAYORIK",33:"MAS",34:"POR",35:"DIVI",36:"MODULO",37:"POTENCIA",38:"PARA",39:"PARC",40:"DOUBLE",41:"DATE",42:"INTEGER",43:"VARCHAR",44:"VARIABLE",45:"ID",48:"R_DECLARE",52:"R_DEFAULT",53:"COMA",54:"R_INT",55:"R_DOUBLE",56:"R_VARCHAR",57:"R_DATE",58:"R_SET",59:"R_PRINT",60:"R_IF",61:"R_THEN",62:"R_ELSE",63:"R_CAST",64:"R_AS",65:"R_CREATE",66:"R_TABLE",69:"R_INSERT",70:"R_INTO",72:"R_VALUES",74:"R_ALTER",76:"R_ADD",77:"R_DROP",78:"R_COLUMN",79:"R_RENAME",80:"R_TO",81:"R_SELECT",83:"R_FROM",85:"R_WHERE",87:"NOT",89:"R_UPDATE",92:"R_DELETE",93:"R_FOR",95:"R_IN",96:"DOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[16,3],[19,2],[19,1],[21,2],[21,2],[21,1],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[22,1],[22,2],[50,2],[47,5],[49,3],[49,1],[51,1],[51,1],[51,1],[51,1],[23,4],[9,2],[7,6],[7,8],[46,6],[10,6],[67,3],[67,1],[68,2],[11,10],[71,3],[71,1],[73,3],[73,1],[12,4],[75,2],[75,3],[75,3],[75,5],[13,5],[13,2],[82,1],[82,1],[84,2],[84,0],[86,3],[86,3],[86,2],[86,3],[86,3],[86,3],[86,3],[86,3],[88,1],[14,5],[90,3],[90,1],[91,3],[15,4],[17,10],[94,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2:

		console.log('instrucciones Instruccion');		
	    this.$ = $$[$0-1];
			if (Array.isArray($$[$0])) {
				$$[$0-1].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
				this.$.push($$[$0]);
			}		
	 
break;
case 3:

		console.log('Instruccion');
	    this.$ = []; 
			if (Array.isArray($$[$0])) {
				$$[$0].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
	   			this.$.push($$[$0]);
			}		

		 
break;
case 4:
console.log('if instruccion');
break;
case 5:
console.log('print instruccion');
break;
case 6:
console.log('Instruccion createTable');
break;
case 7:
console.log('Instruccion insertG');
break;
case 8:
console.log('Instruccion alterTable');
break;
case 9: case 10: case 11:
console.log('Instruccion select');
break;
case 12:
console.log('Instruccion beginEnd');
break;
case 13:
console.log('Instruccion for');
break;
case 14:
console.error('Error sintÃ¡ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 15:

			console.log('beginEnd');
			this.$ = new Bloque($$[$0-1],this._$.first_line, this._$.first_column);
		
break;
case 16:

		console.log('instrucciones instruccionBegin');		
	    this.$ = $$[$0-1];
			if (Array.isArray($$[$0])) {
				$$[$0-1].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
				this.$.push($$[$0]);
			}	
	
break;
case 17:
 
		console.log('instruccionBegin');
	    this.$ = []; 
			if (Array.isArray($$[$0])) {
				$$[$0].forEach(element => {
				   this.$.push(element);
				});
				//console.log("JISON miVariable es un arreglo.");
			} else {
				//console.log(" JISON miVariable no es un arreglo.");
	   			this.$.push($$[$0]);
			}	
	
break;
case 18:
console.log('asigancion');
break;
case 19:
console.log('actualizarV');
break;
case 21:

		 console.log('-' +$$[$0] ); 
		 this.$ = new expresion($$[$0],null,TipoOp.RESTA, true,this._$.first_line, this._$.first_column);
		 
break;
case 22:

		console.log( 'and' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.AND,this._$.first_line, this._$.first_column);
		
break;
case 23:

		console.log( 'IGUAL' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.IGUAL,this._$.first_line, this._$.first_column);
		
break;
case 24:

		console.log( 'OR' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.OR,this._$.first_line, this._$.first_column);
		
break;
case 25:

		console.log( 'MAYORK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MAYORK,this._$.first_line, this._$.first_column);
		
break;
case 26:

		console.log( 'MENORK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MENORK,this._$.first_line, this._$.first_column);
		
break;
case 27:

		console.log( 'MAYORIK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MENORIK,this._$.first_line, this._$.first_column);
		
break;
case 28:

		console.log( 'MAYORIK' ); 
		this.$ = new expresionLo($$[$0-2],$$[$0],TipoOp.MAYORIK,this._$.first_line, this._$.first_column);
		
break;
case 29:

		console.log( 'SUMA ' +$$[$0-2] + ' + ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.SUMA, false,this._$.first_line, this._$.first_column);
		
break;
case 30:

		console.log( 'RESTA ' +$$[$0-2] + ' - ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.RESTA, false,this._$.first_line, this._$.first_column);
		
break;
case 31:

		console.log( 'POR ' +$$[$0-2] + ' * ' +$$[$0] );
	    this.$ = new expresion($$[$0-2],$$[$0],TipoOp.MULTI, false,this._$.first_line, this._$.first_column);
	     
break;
case 32:

		console.log( 'DIVI ' +$$[$0-2] + ' / ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.DIVISION, false,this._$.first_line, this._$.first_column);
		
break;
case 33:

		console.log( 'DIVI ' +$$[$0-2] + ' % ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.MODULO, false,this._$.first_line, this._$.first_column);
		
break;
case 34:

		console.log( 'DIVI ' +$$[$0-2] + ' ^ ' +$$[$0] ); 
		this.$ = new expresion($$[$0-2],$$[$0],TipoOp.POTENCIA, false,this._$.first_line, this._$.first_column);
		
break;
case 35:

		console.log( '( ' +$$[$0-1] + ')' ); 
		this.$ = $$[$0-1];
		
break;
case 36:

		console.log('DOUBLE: ' +$$[$0]); 
		this.$ = new Primitivo(TipoDato.DOUBLE,$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 37:

		console.log('DATE: ' +$$[$0]); 
	    this.$ = new Primitivo(TipoDato.DATE,$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 38:

		console.log('Integer: ' +$$[$0]); 
		this.$ = new Primitivo(TipoDato.INT,$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 39:

		
		console.log('======================================='); 
		console.log('VARCHAR: ' ,$$[$0].slice(1,-1)); 
		console.log('======================================='); 
		this.$ = new Primitivo(TipoDato.VARCHAR,$$[$0].slice(1,-1),this._$.first_line, this._$.first_column);
		
		
break;
case 40:

		console.log('LLAMADO DE VARIABLE: ' +$$[$0]); 
		this.$ = new CallVar($$[$0],this._$.first_line, this._$.first_column);
		
break;
case 41:
 
		console.log('LLAMADO A UN ID : ' +$$[$0]);
		this.$ = new CallId($$[$0],this._$.first_line, this._$.first_column)
	
break;
case 42:

		this.$ = $$[$0];
		
break;
case 43:

				console.log('Asignacion de variable: ' +$$[$0]);
				this.$ = $$[$0];
			
break;
case 44:
 
				console.log('Asignacioness de variables: ' +$$[$0]);
				this.$ = $$[$0];
			
break;
case 45:
 
				this.$ = new Asig($$[$0-1],null,$$[$0],this._$.first_line, this._$.first_column);
			
break;
case 46:

				console.log(`Asignacion de variable: ${$$[$0-3]} valor: ${$$[$0]}`);
				this.$ = new Asig($$[$0-3],$$[$0],$$[$0-2],this._$.first_line, this._$.first_column);

break;
case 47:

					this.$ = $$[$0-2];
					this.$.push($$[$0]);
					console.log('Lista asignaciones coma asignacion 1');
				
break;
case 48:

					console.log('asignacion 1');
					this.$ = []; 
					this.$.push($$[$0]);
				
break;
case 49:
this.$ = TipoDato.INT; 
break;
case 50:
this.$ = TipoDato.DOUBLE; 
break;
case 51:
this.$ = TipoDato.VARCHAR; 
break;
case 52:
this.$ = TipoDato.DATE; 
break;
case 53:

		console.log(`Actualizacion de variable: ${$$[$0-2]} valor: ${$$[$0]}`);
		this.$ = new Actualizar($$[$0-2],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 54:
 
		
		console.log(`Print:`);
		this.$ = new Mostraar($$[$0],this._$.first_line, this._$.first_column);
	
break;
case 55:

		console.log(`If: ${$$[$0-4]} valor: ${$$[$0-1]}`);
		this.$ = new IfC($$[$0-4],$$[$0-2],this._$.first_line, this._$.first_column);
	
break;
case 56:


		console.log('IFELSE');
		this.$ = new IfElse($$[$0-6],$$[$0-4],$$[$0-2],this._$.first_line, this._$.first_column);
	
break;
case 57:
 
		console.log('Casteo');
		this.$ = new Casteo($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 58:
 
			console.log('CreateTable: ');
			this.$ = new TableeI($$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
		
break;
case 59:
 
		console.log('listaColumnas COMA columnasCreateeate');
		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 60:

		console.log('  columnasCreateeate');
		this.$ = [];
		this.$.push($$[$0]);
	
break;
case 61:
 
			console.log('ColumnasCreate');
			console.log(`ID: ${$$[$0-1]}`);
			this.$ = new Columnas($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
		
break;
case 62:

		console.log('Insert: ');
		this.$ = new InsertIng($$[$0-7],$$[$0-5],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 63:
 
			console.log('listColumnas');
			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 64:
 
			console.log('listColumnas');
			this.$ = [];
			this.$.push($$[$0]);
		
break;
case 65:
 
		console.log('ValuesInsert');
		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 66:
 
		console.log('ValuesInsert');
		this.$ = [];
		this.$.push($$[$0]);
	
break;
case 67:
 
		console.log('AlterTable');
		this.$ = new AlterT($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 68:
 
		console.log('instAlter add colummn');
		this.$ = new AddColumn($$[$0],this._$.first_line, this._$.first_column);

	
break;
case 69:
 
		console.log('instAlter drop column');
		this.$ = new DropColumn($$[$0],this._$.first_line, this._$.first_column);
	
break;
case 70:
 
		console.log('instAlter rename column');
		this.$ = new RenameTable($$[$0],this._$.first_line, this._$.first_column);
	
break;
case 71:
 
		console.log('instAlter rename column');
		this.$ = new RenameColumn($$[$0-2],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 72:

		console.log('select');
		this.$ = new SelectTable($$[$0-1],$$[$0-3],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 74:
 
			console.log('instSelect *');
			this.$ = '*';
		
break;
case 75:
 
			console.log('instSelect listColumnas');
			this.$ = $$[$0];
		
break;
case 76:
 
	console.log('where');
	this.$ = $$[$0];
break;
case 77:
 
		console.log('where');
		this.$ = null;
	
break;
case 78:

		console.log( 'and' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.AND,this._$.first_line, this._$.first_column);
		
break;
case 79:

		console.log( 'OR' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.OR,this._$.first_line, this._$.first_column);
		
break;
case 80:

		console.log( 'NOT' ); 
		this.$ = new ConditionT(null,$$[$0],true,TipoOp.NOT,this._$.first_line, this._$.first_column);
		
break;
case 81:

		console.log( 'IGUAL' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.IGUAL,this._$.first_line, this._$.first_column);
		
break;
case 82:

		console.log( 'MAYORK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MAYORK,this._$.first_line, this._$.first_column);
		
break;
case 83:

		console.log( 'MENORK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MENORK,this._$.first_line, this._$.first_column);
		
break;
case 84:

		console.log( 'MAYORIK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MENORIK,this._$.first_line, this._$.first_column);
		
break;
case 85:

		console.log( 'MAYORIK' ); 
		this.$ = new ConditionT($$[$0-2],$$[$0],false,TipoOp.MAYORIK,this._$.first_line, this._$.first_column);
		
break;
case 86:

		console.log('LLAMADO DE ID: ' +$$[$0]); 
		this.$ = new Primitivo(TipoDato.ID,$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 87:

		console.log('updateG');
		this.$ = new UpdateT($$[$0-3],$$[$0-1],$$[$0],this._$.first_line, this._$.first_column);
	
break;
case 88:
 
		console.log('listUpdate');
		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 89:
 
		console.log('listUpdate');
		this.$ = [];
		this.$.push($$[$0]);
	
break;
case 90:
 
		console.log('set');
		this.$ = [ ];
		this.$.push($$[$0-2] );
		this.$.push($$[$0] );
	
break;
case 91:
 
		console.log('Delete');
		this.$ = new DeleteT1($$[$0-1],$$[$0],this._$.first_line, this._$.first_column);

	
break;
case 92:
 
		console.log('For');
		this.$ = new ForI($$[$0-8],$$[$0-6],$$[$0-3],$$[$0-1],this._$.first_line, this._$.first_column);
	
break;
case 93:

		console.log('LLAMADO DE ID: ' +$$[$0]); 
		//ASIG
		this.$ = new VariableClass($$[$0],null,this._$.first_line, this._$.first_column)
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{1:[3]},{2:$V0,5:[1,25],6:26,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},o($Vb,[2,3]),{8:[1,27]},{8:[1,28]},{8:[1,29]},{8:[1,30]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{8:[1,34]},o($Vc,[2,12]),{8:[1,35]},{8:[1,36]},{24:37,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:48,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{66:[1,49]},{70:[1,50]},{66:[1,51]},{34:[1,54],44:[1,53],45:$Vm,71:55,82:52},{45:[1,57]},{83:[1,58]},{2:$V0,6:63,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:59,21:60,22:61,23:62,47:64,48:$Vn,58:$Vo,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{45:[1,68],94:67},{1:[2,1]},o($Vb,[2,2]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,13]),o($Vc,[2,14]),{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,61:[1,69]},{24:83,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:84,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,42]),{38:[1,85]},{8:[2,54],25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB},{45:[1,86]},{45:[1,87]},{45:[1,88]},{83:[1,89]},{8:[2,73]},{83:[2,74]},{53:$VD,83:[2,75]},o($VE,[2,64]),{58:[1,91]},{45:[1,92]},{2:$V0,6:63,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,20:[1,93],21:94,22:61,23:62,47:64,48:$Vn,58:$Vo,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},o($VF,[2,17]),{8:[1,95]},{8:[1,96]},o($VF,[2,20]),{8:[2,43]},{44:[1,98],49:97,50:99},{44:[1,100]},{95:[1,101]},{95:[2,93]},{2:$V0,4:102,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{24:103,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:104,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:105,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:106,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:107,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:108,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:109,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:110,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:111,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:112,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:113,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:114,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:115,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},o($VC,[2,21]),{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,39:[1,116]},{24:117,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{38:[1,118]},{38:[1,119]},{75:120,76:[1,121],77:[1,122],79:[1,123]},{45:[1,124]},{45:[1,125]},{45:$VG,88:128,90:126,91:127},{8:$VH,84:130,85:$VI},o($Vc,[2,15]),o($VF,[2,16]),o($VF,[2,18]),o($VF,[2,19]),{8:[2,44],53:[1,132]},{51:133,54:$VJ,55:$VK,56:$VL,57:$VM},o($VN,[2,48]),{27:[1,138]},{24:139,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{2:$V0,6:26,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,20:[1,140],59:$V2,60:$V3,62:[1,141],65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},o([8,18,26,28,39,53,61,64,85,96],[2,22],{25:$Vp,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VO,[2,23],{25:$Vp,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o([8,18,28,39,53,61,64,85,96],[2,24],{25:$Vp,26:$Vq,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VO,[2,25],{25:$Vp,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VO,[2,26],{25:$Vp,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VP,[2,27],{25:$Vp,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VP,[2,28],{25:$Vp,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VQ,[2,29],{34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VQ,[2,30],{34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VR,[2,31],{37:$VB}),o($VR,[2,32],{37:$VB}),o($VR,[2,33],{37:$VB}),o($VC,[2,34]),o($VC,[2,35]),{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,64:[1,142]},{45:$VS,67:143,68:144},{45:$Vm,71:146},{8:[2,67]},{45:$VS,68:147},{78:[1,148]},{78:[1,150],80:[1,149]},{8:$VH,84:151,85:$VI},o($VE,[2,63]),{8:$VH,53:[1,153],84:152,85:$VI},o($VT,[2,89]),{27:[1,154]},o([27,29,30,31,32],[2,86]),{8:[2,91]},{45:$VG,86:155,87:$VU,88:157},{44:[1,159],50:158},o($VN,$VV,{52:[1,160]}),o($VW,[2,49]),o($VW,[2,50]),o($VW,[2,51]),o($VW,[2,52]),{24:161,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB,96:[1,162]},{60:[1,163]},{2:$V0,4:164,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{51:165,54:$VJ,55:$VK,56:$VL,57:$VM},{39:[1,166],53:[1,167]},o($VX,[2,60]),{51:168,54:$VJ,55:$VK,56:$VL,57:$VM},{39:[1,169],53:$VD},{8:[2,68]},{45:[1,170]},{45:[1,171]},{45:[1,172]},{8:[2,72]},{8:[2,87]},{45:$VG,88:128,91:173},{24:174,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{8:[2,76],26:$VY,28:[1,176]},{45:$VG,86:177,87:$VU,88:157},{27:[1,178],29:[1,179],30:[1,180],31:[1,181],32:[1,182]},o($VN,[2,47]),{51:183,54:$VJ,55:$VK,56:$VL,57:$VM},{24:184,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{8:[2,53],25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB},{96:[1,185]},{8:[2,55]},{2:$V0,6:26,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,20:[1,186],59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{39:[1,187]},{8:[2,58]},{45:$VS,68:188},o([8,39,53],[2,61]),{72:[1,189]},{8:[2,69]},{8:[2,70]},{80:[1,190]},o($VT,[2,88]),o($VT,[2,90],{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),{45:$VG,86:191,87:$VU,88:157},{45:$VG,86:192,87:$VU,88:157},o($VZ,[2,80]),{24:193,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:194,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:195,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:196,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{24:197,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},o($VN,$VV),{8:[2,46],25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB},{24:198,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{60:[1,199]},o($VC,[2,57]),o($VX,[2,59]),{38:[1,200]},{45:[1,201]},o($VZ,[2,78]),o([8,28],[2,79],{26:$VY}),o($VZ,[2,81],{25:$Vp,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VZ,[2,82],{25:$Vp,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VZ,[2,83],{25:$Vp,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VZ,[2,84],{25:$Vp,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),o($VZ,[2,85],{25:$Vp,27:$Vr,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),{18:[1,202],25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB},{8:[2,56]},{24:204,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl,73:203},{8:[2,71]},{2:$V0,4:205,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{39:[1,206],53:[1,207]},o($VX,[2,66],{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB}),{2:$V0,6:26,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,20:[1,208],59:$V2,60:$V3,65:$V4,69:$V5,74:$V6,81:$V7,89:$V8,92:$V9,93:$Va},{8:[2,62]},{24:209,25:$Vd,38:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:$Vk,46:46,63:$Vl},{8:[2,92]},o($VX,[2,65],{25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,34:$Vy,35:$Vz,36:$VA,37:$VB})],
defaultActions: {25:[2,1],53:[2,73],54:[2,74],64:[2,43],68:[2,93],120:[2,67],130:[2,91],147:[2,68],151:[2,72],152:[2,87],163:[2,55],166:[2,58],170:[2,69],171:[2,70],199:[2,56],201:[2,71],206:[2,62],208:[2,92]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Primitivo = require('../Interprete/expresion/Primitivo.js');
	const expresion = require('../Interprete/expresion/Expresion.js');
	const expresionLo = require('../Interprete/expresion/ExpresionLo.js');
	const TipoDato = require('../Interprete/Enums/TipoDato.js');
	const TipoOp   = require('../Interprete/Enums/TipoOp.js');
	const Asig      = require('../Interprete/Clases/Asig.js');
	const Actualizar = require('../Interprete/Clases/Actualizar.js');
	const IfC = require('../Interprete/Clases/IF.js');
	const IfElse = require('../Interprete/Clases/IFELSE.js');
	//CallVar
	const CallVar = require('../Interprete/Clases/CallVar.js');
	//PRINT 
	const Mostraar = require('../Interprete/Clases/PRINT.js');

	//Casteo: 
	const Casteo = require('../Interprete/Clases/Casteo.js');
	const Columnas = require('../Interprete/Tables/Columnas.js');
	const TableeI = require('../Interprete/Tables/TableeI.js');
	const InsertIng = require('../Interprete/Tables/InsertIn.js');
	const AddColumn = require('../Interprete/Tables/AddColumn.js');
	const DropColumn = require('../Interprete/Tables/DropColumn.js');
	const AlterT = require('../Interprete/Tables/AlterT.js');
	const RenameTable = require('../Interprete/Tables/RenameTable.js');
	const RenameColumn = require('../Interprete/Tables/RenameColumn.js');
	const SelectTable = require('../Interprete/Tables/SelectTable.js');
	const ConditionT = require('../Interprete/Tables/CondicionT.js');
	const UpdateT = require('../Interprete/Tables/UpdateT.js');
	const DeleteT1= require('../Interprete/Tables/DeleteT.js');
	const Bloque = require('../Interprete/Clases/BloqueBegin.js');
	const ForI = require('../Interprete/Clases/ForI.js');
	const VariableClass = require('../Interprete/Entornos/Variable.js');
	const CallId = require('../Interprete/Clases/CallId.js');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:console.log('comentario simple'); 
break;
case 1:console.log('multilinea');
break;
case 2:return 54;
break;
case 3:return 55;
break;
case 4:return 56;
break;
case 5:return 57;
break;
case 6:return 66;
break;
case 7:return 69;
break;
case 8:return 70;
break;
case 9:return 72;
break;
case 10:return 65;
break;
case 11:return 74;
break;
case 12:return 77;
break;
case 13:return 78;
break;
case 14:return 79;
break;
case 15:return 76;
break;
case 16:return 80;
break;
case 17:return 92;
break;
case 18:return 81;
break;
case 19:return 83;
break;
case 20:return 85;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 'R_DATABASE';
break;
case 24:return 'R_PRIMARY';
break;
case 25:return 'R_KEY';
break;
case 26:return 'R_FOREIGN';
break;
case 27:return 33;
break;
case 28:return 25;
break;
case 29:return 34;
break;
case 30:return 35;
break;
case 31:return 27;
break;
case 32:return 36;
break;
case 33:return 37;
break;
case 34:return 26;
break;
case 35:return 28;
break;
case 36:return 87;
break;
case 37:return 'R_XOR';
break;
case 38:return 32;
break;
case 39:return 31;
break;
case 40:return 30;
break;
case 41:return 29;
break;
case 42:return 'DIFERENTE';
break;
case 43:return 48;
break;
case 44:return 52;
break;
case 45:return 58;
break;
case 46:return 60;
break;
case 47:return 61;
break;
case 48:return 18;
break;
case 49:return 62;
break;
case 50:return 20;
break;
case 51:return 89;
break;
case 52:return 93;
break;
case 53:return 95;
break;
case 54:return 96;
break;
case 55:return 59;
break;
case 56:return 8;
break;
case 57:return 'LLAVEA';
break;
case 58:return 'LLAVEC';
break;
case 59:return 38;
break;
case 60:return 39;
break;
case 61:return 'CORCHA';
break;
case 62:return 'CORCHC';
break;
case 63:return 53;
break;
case 64: return 43; 
break;
case 65: return 41; 
break;
case 66: return 40; 
break;
case 67: return 42; 
break;
case 68: return 45; 
break;
case 69: return 44; 
break;
case 70:/* Espacios se ignoran */
break;
case 71:return 5;
break;
case 72: console.error('Error lÃ©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:varchar\b)/i,/^(?:date\b)/i,/^(?:table\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:add\b)/i,/^(?:to\b)/i,/^(?:delete\b)/i,/^(?:select\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:database\b)/i,/^(?:primary\b)/i,/^(?:key\b)/i,/^(?:foreign\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:xor\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:begin\b)/i,/^(?:else\b)/i,/^(?:end\b)/i,/^(?:update\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:\.)/i,/^(?:print\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:("([^\\\"]|\\.)*"))/i,/^(?:(([0-9]{4}-[0-9]{2}-[0-9]{2})))/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:([0-9]+))/i,/^(?:([a-zA-Z][a-zA-Z0-9]*))/i,/^(?:(@[a-zA-Z][a-zA-Z0-9]*))/i,/^(?:[ \s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}